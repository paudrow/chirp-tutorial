import { GetStaticPaths, GetStaticProps, InferGetStaticPropsType, type NextPage } from "next";
import Head from "next/head";

import { api } from "@/utils/api";
import { PageLayout } from "@/components/layout";


const ProfilePage: NextPage<{username: string}> = ({username}) => {

  const {data: user } = api.profile.getUserByUsername.useQuery({ username });

  if (!user) return <div>User not found</div>

  return (
    <>
      <Head>
        <title>{username}</title>
        <meta name="description" content="Generated by create-t3-app" />
      </Head>
      <PageLayout>
          {user.username}
      </PageLayout>
    </>
  );
};

import { createServerSideHelpers } from '@trpc/react-query/server';
import { prisma } from "@/server/db";
import { appRouter } from "@/server/api/root";
import superjson from "superjson";

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: {prisma, currentUserId: null},
    transformer: superjson,
  });

  const slug = context.params?.slug;
  if (typeof slug !== "string") throw new Error("Slug is not a string");
  const username = slug.replace("@", "");

  await ssg.profile.getUserByUsername.prefetch({ username });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  }
}

export const getStaticPaths: GetStaticPaths = async () => {
  return {
    paths: [],
    fallback: "blocking",
  };
}

export default ProfilePage;
